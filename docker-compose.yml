networks:
  splunk-network:
    driver: bridge
    attachable: true

services:
  # Traefik reverse proxy and load balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      # Enable Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Configure entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.mcp.address=:8000
      # Enable API and dashboard (optional, for debugging)
      - --api.dashboard=true
      - --api.insecure=true
      # Logging
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"           # HTTP
      - "8001:8000"       # MCP Server port
      - "8080:8080"       # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - splunk-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # MCP Server for Splunk
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    restart: unless-stopped
    networks:
      - splunk-network
    ports:
      - "6274:6274"       # MCP Inspector direct access
      - "8002:8000"       # MCP Server direct access (optional)
    environment:
      - SPLUNK_HOST=${SPLUNK_HOST:-so1}
      - SPLUNK_PORT=${SPLUNK_PORT:-8089}
      - SPLUNK_USERNAME=${SPLUNK_USERNAME:-admin}
      - SPLUNK_PASSWORD=${SPLUNK_PASSWORD:-Chang3d!}
      - SPLUNK_VERIFY_SSL=${SPLUNK_VERIFY_SSL:-false}
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8000
    depends_on:
      - so1
      - traefik
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      
      # HTTP router for MCP server (Streamable HTTP transport)
      - "traefik.http.routers.mcp-server.rule=PathPrefix(`/mcp/`)"
      - "traefik.http.routers.mcp-server.entrypoints=mcp"
      - "traefik.http.routers.mcp-server.service=mcp-server"
      
      # Service definition pointing to container port 8000
      - "traefik.http.services.mcp-server.loadbalancer.server.port=8000"
      
      # Add middleware for CORS headers (important for web clients)
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolallowmethods=GET,POST,OPTIONS,PUT,DELETE"
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolallowheaders=Content-Type,Authorization,Accept"
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.routers.mcp-server.middlewares=mcp-cors"
    develop:
        watch:
          - path: ./src
            action: sync
            target: /app/src
            ignore:
              - "**/__pycache__"
              - "**/*.pyc"
              - "**/*.pyo"
              - "**/.pytest_cache"
              - "**/venv"
              - "**/.venv"
          - path: ./pyproject.toml
            action: rebuild

  # Splunk Enterprise (existing configuration)
  so1:
    networks:
      splunk-network:
        aliases:
          - so1
    image: ${SPLUNK_IMAGE:-splunk/splunk:latest}
    platform: linux/amd64
    hostname: so1
    container_name: so1
    restart: unless-stopped
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_HEC_TOKEN=26898dec-83d1-49f1-b06e-90eabff7f543
      - SPLUNK_PASSWORD=Chang3d!
    ports:
      - "9000:8000"   # Splunk Web UI
      - "8088:8088"   # HEC
      - "8089:8089"   # Management port
    volumes:
      - ./lic/splunk.lic:/tmp/license/splunk.lic
    healthcheck:
      test: ["CMD", "curl", "-s", "-k", "https://localhost:8089/services/server/info"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
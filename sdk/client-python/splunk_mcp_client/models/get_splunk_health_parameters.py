# coding: utf-8

"""
    MCP Server for Splunk API

    Model Context Protocol server providing Splunk integration tools

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetSplunkHealthParameters(BaseModel):
    """
    GetSplunkHealthParameters
    """ # noqa: E501
    splunk_host: Optional[StrictStr] = Field(default='None', description="Splunk server hostname or IP address. If not provided, uses the server's configured connection.")
    splunk_port: Optional[StrictStr] = Field(default='None', description="Splunk management port (typically 8089). Defaults to server configuration.")
    splunk_username: Optional[StrictStr] = Field(default='None', description="Splunk username for authentication. Uses server configuration if not provided.")
    splunk_password: Optional[StrictStr] = Field(default='None', description="Splunk password for authentication. Uses server configuration if not provided.")
    splunk_scheme: Optional[StrictStr] = Field(default='None', description="Connection scheme ('http' or 'https'). Defaults to server configuration.")
    splunk_verify_ssl: Optional[StrictStr] = Field(default='None', description="Whether to verify SSL certificates. Defaults to server configuration.")
    __properties: ClassVar[List[str]] = ["splunk_host", "splunk_port", "splunk_username", "splunk_password", "splunk_scheme", "splunk_verify_ssl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSplunkHealthParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSplunkHealthParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "splunk_host": obj.get("splunk_host") if obj.get("splunk_host") is not None else 'None',
            "splunk_port": obj.get("splunk_port") if obj.get("splunk_port") is not None else 'None',
            "splunk_username": obj.get("splunk_username") if obj.get("splunk_username") is not None else 'None',
            "splunk_password": obj.get("splunk_password") if obj.get("splunk_password") is not None else 'None',
            "splunk_scheme": obj.get("splunk_scheme") if obj.get("splunk_scheme") is not None else 'None',
            "splunk_verify_ssl": obj.get("splunk_verify_ssl") if obj.get("splunk_verify_ssl") is not None else 'None'
        })
        return _obj



# coding: utf-8

"""
    MCP Server for Splunk API

    Model Context Protocol server providing Splunk integration tools

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from splunk_mcp_client.models.tool_call_request import ToolCallRequest

class TestToolCallRequest(unittest.TestCase):
    """ToolCallRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolCallRequest:
        """Test ToolCallRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolCallRequest`
        """
        model = ToolCallRequest()
        if include_optional:
            return ToolCallRequest(
                jsonrpc = '2.0',
                method = 'tools/call',
                params = splunk_mcp_client.models.tool_call_request_params.ToolCallRequest_params(
                    name = 'get_configurations', 
                    arguments = splunk_mcp_client.models.arguments.arguments(), ),
                id = ''
            )
        else:
            return ToolCallRequest(
                jsonrpc = '2.0',
                method = 'tools/call',
                params = splunk_mcp_client.models.tool_call_request_params.ToolCallRequest_params(
                    name = 'get_configurations', 
                    arguments = splunk_mcp_client.models.arguments.arguments(), ),
        )
        """

    def testToolCallRequest(self):
        """Test ToolCallRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

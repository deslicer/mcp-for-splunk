/* tslint:disable */
/* eslint-disable */
/**
 * MCP Server for Splunk API
 * Model Context Protocol server providing Splunk integration tools
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ToolCallRequest,
  ToolCallResponse,
  ToolListResponse,
} from '../models/index';
import {
    ToolCallRequestFromJSON,
    ToolCallRequestToJSON,
    ToolCallResponseFromJSON,
    ToolCallResponseToJSON,
    ToolListResponseFromJSON,
    ToolListResponseToJSON,
} from '../models/index';

export interface ToolsCallPostRequest {
    toolCallRequest: ToolCallRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Execute any available MCP tool with parameters
     * @summary Execute MCP Tool
     * @param {ToolCallRequest} toolCallRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    toolsCallPostRaw(requestParameters: ToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolCallResponse>>;

    /**
     * Execute any available MCP tool with parameters
     * Execute MCP Tool
     */
    toolsCallPost(requestParameters: ToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolCallResponse>;

    /**
     * Get list of all available tools
     * @summary List Available Tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    toolsListPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolListResponse>>;

    /**
     * Get list of all available tools
     * List Available Tools
     */
    toolsListPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolListResponse>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Execute any available MCP tool with parameters
     * Execute MCP Tool
     */
    async toolsCallPostRaw(requestParameters: ToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolCallResponse>> {
        if (requestParameters['toolCallRequest'] == null) {
            throw new runtime.RequiredError(
                'toolCallRequest',
                'Required parameter "toolCallRequest" was null or undefined when calling toolsCallPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/tools/call`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolCallRequestToJSON(requestParameters['toolCallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolCallResponseFromJSON(jsonValue));
    }

    /**
     * Execute any available MCP tool with parameters
     * Execute MCP Tool
     */
    async toolsCallPost(requestParameters: ToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolCallResponse> {
        const response = await this.toolsCallPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of all available tools
     * List Available Tools
     */
    async toolsListPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/tools/list`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolListResponseFromJSON(jsonValue));
    }

    /**
     * Get list of all available tools
     * List Available Tools
     */
    async toolsListPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolListResponse> {
        const response = await this.toolsListPostRaw(initOverrides);
        return await response.value();
    }

}

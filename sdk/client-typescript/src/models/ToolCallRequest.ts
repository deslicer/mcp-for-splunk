/* tslint:disable */
/* eslint-disable */
/**
 * MCP Server for Splunk API
 * Model Context Protocol server providing Splunk integration tools
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolCallRequestParams } from './ToolCallRequestParams';
import {
    ToolCallRequestParamsFromJSON,
    ToolCallRequestParamsFromJSONTyped,
    ToolCallRequestParamsToJSON,
    ToolCallRequestParamsToJSONTyped,
} from './ToolCallRequestParams';

/**
 * 
 * @export
 * @interface ToolCallRequest
 */
export interface ToolCallRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolCallRequest
     */
    jsonrpc: ToolCallRequestJsonrpcEnum;
    /**
     * 
     * @type {string}
     * @memberof ToolCallRequest
     */
    method: ToolCallRequestMethodEnum;
    /**
     * 
     * @type {ToolCallRequestParams}
     * @memberof ToolCallRequest
     */
    params: ToolCallRequestParams;
    /**
     * 
     * @type {string}
     * @memberof ToolCallRequest
     */
    id?: string;
}


/**
 * @export
 */
export const ToolCallRequestJsonrpcEnum = {
    _20: '2.0'
} as const;
export type ToolCallRequestJsonrpcEnum = typeof ToolCallRequestJsonrpcEnum[keyof typeof ToolCallRequestJsonrpcEnum];

/**
 * @export
 */
export const ToolCallRequestMethodEnum = {
    ToolsCall: 'tools/call'
} as const;
export type ToolCallRequestMethodEnum = typeof ToolCallRequestMethodEnum[keyof typeof ToolCallRequestMethodEnum];


/**
 * Check if a given object implements the ToolCallRequest interface.
 */
export function instanceOfToolCallRequest(value: object): value is ToolCallRequest {
    if (!('jsonrpc' in value) || value['jsonrpc'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('params' in value) || value['params'] === undefined) return false;
    return true;
}

export function ToolCallRequestFromJSON(json: any): ToolCallRequest {
    return ToolCallRequestFromJSONTyped(json, false);
}

export function ToolCallRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolCallRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'jsonrpc': json['jsonrpc'],
        'method': json['method'],
        'params': ToolCallRequestParamsFromJSON(json['params']),
        'id': json['id'] == null ? undefined : json['id'],
    };
}

export function ToolCallRequestToJSON(json: any): ToolCallRequest {
    return ToolCallRequestToJSONTyped(json, false);
}

export function ToolCallRequestToJSONTyped(value?: ToolCallRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'jsonrpc': value['jsonrpc'],
        'method': value['method'],
        'params': ToolCallRequestParamsToJSON(value['params']),
        'id': value['id'],
    };
}


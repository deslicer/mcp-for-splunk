name: Smart Install CI

on:
  push:
    paths:
      - 'scripts/smart-install.sh'
      - '.github/workflows/smart-install-ci.yml'
  pull_request:
    paths:
      - 'scripts/smart-install.sh'
      - '.github/workflows/smart-install-ci.yml'

permissions:
  contents: read

concurrency:
  group: smart-install-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-smart-install:
    name: ${{ matrix.os }} â€¢ ${{ matrix.scenario }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        scenario: [default, python-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Purge uv artifacts (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          rm -rf ~/.cache/uv || true
          rm -rf ~/.local/share/uv || true
          rm -rf ~/.local/bin/uv ~/.local/bin/uvx ~/.local/bin/uvw || true
          echo "Purged uv caches and binaries"

      - name: Purge uv artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:USERPROFILE\.cache\uv" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$env:USERPROFILE\.local\share\uv" -ErrorAction SilentlyContinue
          Remove-Item -Force "$env:USERPROFILE\.local\bin\uv.exe" -ErrorAction SilentlyContinue
          Remove-Item -Force "$env:USERPROFILE\.local\bin\uvx.exe" -ErrorAction SilentlyContinue
          Remove-Item -Force "$env:USERPROFILE\.local\bin\uvw.exe" -ErrorAction SilentlyContinue
          Write-Host "Purged uv caches and binaries"

      - name: Prepare .python-version (scenario)
        if: matrix.scenario == 'python-version' && matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "3.11" > .python-version
          echo "Using .python-version: $(cat .python-version)"

      - name: Prepare .python-version (Windows scenario)
        if: matrix.scenario == 'python-version' && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Set-Content -Path .python-version -Value '3.11'
          Write-Host "Using .python-version: $(Get-Content .python-version)"

      - name: Run installer (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          bash scripts/smart-install.sh

      - name: Run installer (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pwsh -File scripts/smart-install.ps1

      - name: Sync dependencies and create .venv (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -euxo pipefail
          uv --version
          uv sync
          test -d .venv && echo ".venv created" || (echo ".venv not found" && exit 1)

      - name: Sync dependencies and create .venv (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          uv --version
          uv sync
          if (Test-Path .venv) { Write-Host ".venv created" } else { Write-Error ".venv not found"; exit 1 }

      - name: Verify uv and Python (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -euxo pipefail
          uv --version
          uv python list || true
          PY=$(uv python find)
          echo "Found Python: ${PY}"
          "${PY}" -V
          "${PY}" -c "import sys; print(sys.version)"

      - name: Verify uv and Python (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          uv --version
          uv python list | Out-Null
          $py = uv python find
          Write-Host "Found Python: $py"
          & $py -V
          & $py -c 'import sys; print(sys.version)'



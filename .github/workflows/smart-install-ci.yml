name: Smart Install CI

on:
  push:
    paths:
      - 'scripts/smart-install.sh'
      - '.github/workflows/smart-install-ci.yml'
  pull_request:
    paths:
      - 'scripts/smart-install.sh'
      - '.github/workflows/smart-install-ci.yml'

permissions:
  contents: read

concurrency:
  group: smart-install-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-smart-install:
    name: ${{ matrix.os }} â€¢ ${{ matrix.scenario }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        scenario: [default, python-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache uv artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
            ~/.local/bin
          key: uv-cache-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/.python-version') }}
          restore-keys: |
            uv-cache-${{ runner.os }}-

      - name: Prepare .python-version (scenario)
        if: matrix.scenario == 'python-version' && matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "3.11" > .python-version
          echo "Using .python-version: $(cat .python-version)"

      - name: Prepare .python-version (Windows scenario)
        if: matrix.scenario == 'python-version' && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Set-Content -Path .python-version -Value '3.11'
          Write-Host "Using .python-version: $(Get-Content .python-version)"

      - name: Run installer (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          bash scripts/smart-install.sh

      - name: Run installer (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pwsh -File scripts/smart-install.ps1

      - name: Verify uv and Python (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -euxo pipefail
          uv --version
          uv python list || true
          PY=$(uv python find)
          echo "Found Python: ${PY}"
          "${PY}" -V
          "${PY}" -c "import sys; print(sys.version)"

      - name: Verify uv and Python (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          uv --version
          uv python list | Out-Null
          $py = uv python find
          Write-Host "Found Python: $py"
          & $py -V
          & $py -c 'import sys; print(sys.version)'


